import React, { useState } from 'react';
import { 
  Clipboard, 
  MessageCircle, 
  CheckSquare, 
  FileText, 
  Lightbulb, 
  X, 
  Plus 
} from 'lucide-react';

const GeneralTab = () => {
  // Sample state data
  const [discussionTopics, setDiscussionTopics] = useState([
    { id: "1", title: "General discussion", duration: "5 minutes", notes: "Weekly updates and announcements" },
    { id: "2", title: "HOAs w Front Yards", duration: "3 minutes", notes: "Strategy for approaching front yard maintenance" }
  ]);

  const [actionItems, setActionItems] = useState([
    { id: "1", text: "Deliver Beanies to clients", completed: false, assignedTo: "Sarah" },
    { id: "2", text: "Use due date in Aspire for proper reporting", completed: true, assignedTo: "Team" },
    { id: "3", text: "Frame Prologis Pics", completed: false, assignedTo: "John" },
    { id: "4", text: "Review Slack BD channel", completed: false, assignedTo: "All" }
  ]);

  const [processes, setProcesses] = useState([
    { id: "1", title: "JOB START UP WALKS/PROCESS", description: "Procedure for blowing of landscaped areas and initial job setup requirements" },
    { id: "2", title: "ESTIMATING PROCESS", description: "Standard procedure for accurate estimating using the Estimating Sheet" }
  ]);

  const [ideasText, setIdeasText] = useState(
    "Christmas Gifts - Zoo, Ethel M, Aviators stadium?\nRole Play - what makes you different?\nImportance of retention w current clients - don't hound them for new bids, just be friends"
  );

  // Add new items functions (simplified for demo)
  const addDiscussionTopic = () => {
    setDiscussionTopics([...discussionTopics, { id: Date.now().toString(), title: "", duration: "", notes: "" }]);
  };

  const addActionItem = () => {
    setActionItems([...actionItems, { id: Date.now().toString(), text: "", completed: false, assignedTo: "" }]);
  };

  const addProcess = () => {
    setProcesses([...processes, { id: Date.now().toString(), title: "", description: "" }]);
  };

  // Toggle action item completion
  const toggleActionItemComplete = (index) => {
    const newItems = [...actionItems];
    newItems[index].completed = !newItems[index].completed;
    setActionItems(newItems);
  };

  return (
    <div className="space-y-6 bg-white p-6 rounded-xl">
      <div className="flex items-center border-b border-blue-100 pb-4 mb-2">
        <Clipboard className="h-7 w-7 text-blue-600 mr-3" />
        <h2 className="text-xl font-bold text-gray-800">General <span className="text-blue-600">Topics</span></h2>
      </div>
      
      {/* Discussion Topics Section */}
      <div className="bg-gradient-to-r from-blue-50 to-white rounded-xl p-6 border border-blue-100 shadow-sm">
        <div className="flex items-center mb-4">
          <MessageCircle className="h-5 w-5 text-blue-600 mr-2" />
          <h3 className="text-lg font-medium text-blue-700">Discussion Topics</h3>
          <span className="ml-2 text-sm text-gray-500">(Time-boxed items for meeting)</span>
        </div>
        
        <div className="space-y-3">
          {discussionTopics.map((topic, index) => (
            <div key={index} className="flex items-start gap-3 p-3 bg-white rounded-lg border border-blue-50 hover:shadow-sm transition-all">
              <div className="flex-grow">
                <div className="flex items-center gap-2">
                  <input
                    type="text"
                    className="flex-1 font-medium text-gray-800 bg-transparent border-0 border-b border-dashed border-gray-200 focus:outline-none"
                    value={topic.title}
                    placeholder="Topic title"
                  />
                  <input
                    type="text"
                    className="w-24 text-sm text-gray-500 bg-transparent border-0 border-b border-dashed border-gray-200 focus:outline-none text-right"
                    value={topic.duration}
                    placeholder="Duration"
                  />
                </div>
                <textarea
                  className="mt-2 w-full bg-transparent border-0 focus:outline-none text-gray-600 text-sm min-h-[40px] placeholder:text-gray-400"
                  value={topic.notes}
                  placeholder="Add notes or details about this topic..."
                />
              </div>
              <button className="p-1 h-auto text-gray-400 hover:text-red-600">
                <X className="h-4 w-4" />
              </button>
            </div>
          ))}
          
          <button 
            className="w-full mt-2 border border-dashed border-gray-300 bg-gray-50 hover:bg-gray-100 text-gray-600 p-2 rounded-lg flex items-center justify-center"
            onClick={addDiscussionTopic}
          >
            <Plus className="h-4 w-4 mr-2" /> Add Discussion Topic
          </button>
        </div>
      </div>
      
      {/* Action Items / Reminders Section */}
      <div className="bg-gradient-to-r from-green-50 to-white rounded-xl p-6 border border-green-100 shadow-sm">
        <div className="flex items-center mb-4">
          <CheckSquare className="h-5 w-5 text-green-600 mr-2" />
          <h3 className="text-lg font-medium text-green-700">Action Items & Reminders</h3>
        </div>
        
        <div className="space-y-3">
          {actionItems.map((item, index) => (
            <div key={index} className="flex items-center gap-3 p-3 bg-white rounded-lg border border-green-50 hover:shadow-sm transition-all">
              <input 
                type="checkbox" 
                checked={item.completed}
                onChange={() => toggleActionItemComplete(index)}
                className="w-5 h-5 rounded border-gray-300" 
              />
              <div className="flex-grow">
                <input
                  type="text"
                  className={`w-full bg-transparent border-0 border-b border-dashed border-gray-200 focus:outline-none ${item.completed ? 'line-through text-gray-400' : 'text-gray-700'}`}
                  value={item.text}
                  placeholder="Action item or reminder"
                />
              </div>
              <input
                type="text"
                className="w-24 text-sm text-gray-500 bg-transparent border-0 border-b border-dashed border-gray-200 focus:outline-none text-right"
                value={item.assignedTo}
                placeholder="Assign to"
              />
              <button className="p-1 h-auto text-gray-400 hover:text-red-600">
                <X className="h-4 w-4" />
              </button>
            </div>
          ))}
          
          <button 
            className="w-full mt-2 border border-dashed border-gray-300 bg-gray-50 hover:bg-gray-100 text-gray-600 p-2 rounded-lg flex items-center justify-center"
            onClick={addActionItem}
          >
            <Plus className="h-4 w-4 mr-2" /> Add Action Item
          </button>
        </div>
      </div>
      
      {/* Processes & Procedures Section */}
      <div className="bg-gradient-to-r from-purple-50 to-white rounded-xl p-6 border border-purple-100 shadow-sm">
        <div className="flex items-center mb-4">
          <FileText className="h-5 w-5 text-purple-600 mr-2" />
          <h3 className="text-lg font-medium text-purple-700">Processes & Procedures</h3>
        </div>
        
        <div className="space-y-3">
          {processes.map((process, index) => (
            <div key={index} className="p-3 bg-white rounded-lg border border-purple-50 hover:shadow-sm transition-all">
              <div className="flex items-center justify-between">
                <input
                  type="text"
                  className="font-medium text-gray-800 bg-transparent border-0 border-b border-dashed border-gray-200 focus:outline-none"
                  value={process.title}
                  placeholder="Process title"
                />
                <button className="p-1 h-auto text-gray-400 hover:text-red-600">
                  <X className="h-4 w-4" />
                </button>
              </div>
              <textarea
                className="mt-2 w-full rounded-lg border border-gray-200 p-3 min-h-[80px]"
                value={process.description}
                placeholder="Process details or notes..."
              />
            </div>
          ))}
          
          <button 
            className="w-full mt-2 border border-dashed border-gray-300 bg-gray-50 hover:bg-gray-100 text-gray-600 p-2 rounded-lg flex items-center justify-center"
            onClick={addProcess}
          >
            <Plus className="h-4 w-4 mr-2" /> Add Process/Procedure
          </button>
        </div>
      </div>
      
      {/* Ideas & Brainstorming Section */}
      <div className="bg-gradient-to-r from-amber-50 to-white rounded-xl p-6 border border-amber-100 shadow-sm">
        <div className="flex items-center mb-4">
          <Lightbulb className="h-5 w-5 text-amber-600 mr-2" />
          <h3 className="text-lg font-medium text-amber-700">Ideas & Brainstorming</h3>
        </div>
        
        <textarea
          className="w-full rounded-xl border border-amber-200 p-4 min-h-[120px]"
          value={ideasText}
          placeholder="Capture ideas, brainstorming notes, and future considerations here..."
        />
      </div>
    </div>
  );
};

export default GeneralTab;